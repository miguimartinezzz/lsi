
                                                      PRACTICA 3 DE LEGISLACIÓN Y SGEGURIDAD INFORMÁTICA. HOJA DE RUTA.        

El objetivo de esta práctica es comprender la importancia de los algoritmos criptográficos,
	el uso de autoridades de certificación y su aplicación-funcionamiento en la forma de
	protocolos seguros. También se abordará el proceso de análisis de vulnerabilidades en el
	contexto de los procesos de auditoría de seguridad. Se deberán aplicar los conceptos
	adquiridos en la resolución de los siguientes apartados:
	
PRESETS: SPLUNK Y APACHE ESTÁ PARADO + NESSUS + NTP	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. Tomando como base de trabajo el SSH pruebe sus diversas utilidades:
	a. Abra un shell remoto sobre SSH y analice el proceso que se realiza. Configure su
		fichero ssh_known_hosts para dar soporte a la clave pública del servidor
               
               #analisis incoming
               
               #configuración de ssh_known_hosts
               ->creamos el fichero /etc/ssh/ssh_known_hosts
               ->copiamos la clave publica de nuestro compi: ssh-keyscan 10.11.49.97 >> /etc/ssh/ssh_known_hosts
               ->borramos contenido de .ssh/known_hosts 
               
               si nos conectamos por ssh a nuestro compadre y no nos aparece el mensaje del fingerprint -> FUNCIONA JEJE
               		
		
	b. Haga una copia remota de un fichero utilizando un algoritmo de cifrado
		determinado. Analice el proceso que se realiza.
		
		//enviar de mi maquina a la del compa
		->scp -c aes128-ctr sexo.txt lsi@10.11.49.97:/home/lsi
		
		//coger de la otra maquina y copiarlo a la mia:
		->scp -c aes128-ctr lsi@10.11.49.97:/home/lsi/pito.txt /home/lsi	
	
	c. Configure su cliente y servidor para permitir conexiones basadas en un esquema
		de autenticación de usuario de clave pública.
		
		->generar keys: ssh-keygen -t rsa (lo hace con la última versión)
		->copiar en maq compa: ssh-copy-id -i $HOME/.ssh/id_rsa lsi@10.11.49.97
		->comprobar si funciona: ssh -v lsi@10.11.49.97 ->si entras sin contraseñita: coolio brotha.
		
	d. Mediante túneles SSH securice algún servicio no seguro.
		
		ssh -P -L 10080:10.11..49.97:80 lsi@10.11.49.97
             (comprobar):
                   -lynx http://localhost:80
                   
                   (si sniffeas y no te sale ningún paquete -> todo okay);
      
      
FICHEROS UTILES:
		-> https://docs.oracle.com/cd/E19683-01/806-4078/6jd6cjru7/index.html
		->https://www.techrepublic.com/article/how-to-manually-add-ssh-keys-for-key-authentication/
		(las claves se pasan con sftp en teoría)
		->https://w3.ual.es/~vruiz/Docencia/Apuntes/Networking/Protocols/Level-5/SSH-Lab/index.html
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Tomando como base de trabajo el servidor Apache2
	a. Configure una Autoridad Certificadora en su equipo.
	b.Cree su propio certificado para ser firmado por la Autoridad Certificadora. Bueno, y fírmelo.
	c. Configure su Apache para que únicamente proporcione acceso a un determinado directorio del árbol web bajo la condición del uso de SSL.
	 Considere que si su la clave privada está cifrada en el proceso de arranque su máquina le solicitará la correspondiente frase de paso, 
	 pudiendo dejarla inalcanzable para su sesión ssh de trabajo.
		Escogemos una máquina para Entididad certificadora y otra para el servidor apache, en nuestro caso :

			cr7 -> máquina apache en la 10.11.49.97
			messi -> entidad certificadora en la 10.11.49.98
	Antes de hacer nada le ponemos nombres a las máquinas, esto se hace en /etc/hostname,
	 cambiamos el nombre debian por el que queramos (messi y cr7 en nuestro caso), 
	 y en /etc/hosts añadimos en ambas maquinas la ip del apache y su nombre, en mi caso:

		10.11.49.97	cr7
		AVISO: todo se ejecuta desde el usuario lsi, el root solo se usa para modificar el apache
		Entidad Certificadora :
		En nuestro caso somos 2 máquinas, por lo que la entidad certificadora (uwu) será también el cliente

		Instalamos easyrsa :
		Si ya instalaste openvpn (Ejercicio 3) ya lo tienes instalado

		Creamos una carpeta para hacer mierdas:
		make-cadir easy-rsa/
		Esto crea un directorio easy-rsa en la carpeta que estéas

		Nos movemos al directorio easy-rsa e iniciamos el pki
		cd easy-rsa
		./easyrsa init-pki
		A partir de aqui pedirán una contraseña, inventate una y no la olvides

		Generamos la entidad certificadora de messi
		./easyrsa build-ca
		Generamos el certificado para la maquina apache (cr7)
		./easyrsa build-server-full cr7
		Cambia owo por el nombre del servidor que tengas

		Generamos el certificado para el cliente
		./easyrsa build-client-full messi nopass
		En nuestro caso, la maquina certificadora (messi) es también el cliente, cambia uwu por el nombre de maquina del cliente

		Servidor apache:
		Igual que en certificadora, instalamos easy-rsa y creamos una carpeta con el mismo nombre (los 2 primeros pasos)
		Desde la carpeta easy-rsa copiamos en nuestra maquina los 3 archivos generados por la entidad certificadora:
		cd easy-rsa
		sftp lsi@10.11.49.98
		get /easy-rsa/pki/issued/cr7.crt
		get /easy-rsa/pki/private/cr7.key
		get /easy-rsa/pki/ca.crt
		Cambiamos el tipo del cr7.crt a cr7.pem
		mv owo.crt owo.pem
		Nos metemos en sudo y modificamos/descomentamos en /etc/apache2/sites-enabled/default-ssl.conf las siguientes lineas:
		SSLCertificateFile      /home/lsi/easy-rsa/pki/issued/cr7.pem
		SSLCertificateKeyFile  /home/lsi/easy-rsa/pki/private/cr7.key

		SLCACertificatePath /home/lsi/easy-rsa/pki
		SSLCACertificateFile /home/lsi/easy-rsa/pki/ca.crt

		SSLVerifyClient require
		reiniciamos el apache y le metemos la contraseña que hayamos usado
		systemctl restart apache2
		Cliente
		Remarco, en nuestro caso la entidad certificadora hará como cliente por lo que reutilizando las carpetas en las que creamos las movidas de cliente

		Creamos un w3m config:
		nano ~/.w3m/config
		Y añadimos las siguientes movidas :
		ssl_cert_file /home/lsi/easy-rsa/pki/issued/messi.crt
		ssl_key_file /home/lsi/easy-rsa/pki/private/messi.key
		ssl_ca_file /home/lsi/easy-rsa/pki/ca.crt
		Finalmente probamos con un :
		w3m https://owo
		w3m https://10.11.49.92
		Aviso post: Es posible que al hacer reboot, el apache empiece a consumir demasiados recursos, 
		para evitarlo hazle un disable y activalo cndo lo necesites, y a tomar por culo

 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Tomando como base de trabajo el openVPN deberá configurar una VPN entre dos
	equipos virtuales del laboratorio que garanticen la confidencialidad entre sus
	comunicaciones.
	
                -apt install openvpn
		-openssl está instalado
		-lsmod | grep tun ->Tun es un enlace punto a punto virtual por IP. Es, 
		por lo tanto una VPN de nivel 3 en la capa OSI (nivel de red). 
		El problema es que es un enlace punto a punto…es decir conecta dos máquinas y no dos redes.
		
		MAQUINA X:
		-cd /etc/openvpn
		- --genkey secret clavesita.key
		
		MAQUINA Y:
		-chmod 777 /etc/openvpn
		-scp -c aes128-ctr /etc/openvpn/clavesita.key lsi@10.11.49.Y:/etc/openvpn/clavesita.key
		-chmod 775 /etc/openvpn
		
		ARCHIVOS DE CONFIGURACIÓN tunel.conf: 
		local 10.11.49.98
		remote 10.11.49.97
		dev tun1
		port 5555
		comp-lzo
		user nobody
		ping 15
		ifconfig 172.160.0.1 172.160.0.2
		secret /etc/openvpn/clavesita.key
		
		CREAR CONEXIÓN MEDIANTE: 
		-openvpn --verb 5 --config /etc/openvpn/tunel.conf --daemon
		
		-desde otro terminal:
		-ifconfig -a (para ver si está levantado)
		-ping 172.160.0.1/2 pa ver si contesta.


		

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. En este punto, cada máquina virtual será servidor y cliente de diversos servicios (NTP,
	syslog, ssh, web, etc.). Configure un “firewall stateful” de máquina adecuado a la
	situación actual de su máquina.
	
	creamos un script firewall.sh y añadimos las reglas:
	
iptables -F           #Borramos reglas previas
iptables -X           #Borramos las cadenas definidas por el usuario

ip6tables -F           #Borramos reglas previas
ip6tables -X

iptables -P INPUT DROP
iptables -P FORWARD DROP
iptables -P OUTPUT DROP

ip6tables -P INPUT DROP
ip6tables -P FORWARD DROP
ip6tables -P OUTPUT DROP

iptables -A INPUT -i lo -j ACCEPT           #Aceptamos salida y entrada de la interfaz de loopback
iptables -A OUTPUT -o lo -j ACCEPT

iptables -A INPUT -i tun6to4 -j ACCEPT
iptables -A OUTPUT -o tun6to4 -j ACCEPT

ip6tables -A INPUT -i lo -j ACCEPT
ip6tables -A OUTPUT -o lo -j ACCEPT

iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT    #Aceptamos todo lo establecido
iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

ip6tables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT    #Aceptamos todo lo establecido (
ip6tables -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# PING

iptables -A INPUT -p ICMP -s  $compañero_ip_ens33 -m conntrack --ctstate NEW -j ACCEPT
iptables -A INPUT -p ICMP -s  $compañero_ip_ens34 -m conntrack --ctstate NEW -j ACCEPT
iptables -A INPUT -p ICMP -s  $compañero_ip_vpn   -m conntrack --cstate NEW  -j ACCEPT
iptables -A OUTPUT -p ICMP -m conntrack --ctstate NEW -j ACCEPT


#SSH

iptables -A INPUT -p TCP --dport 22 -s $compañero_ip_ens33 -m conntrack --ctstate NEW -j ACCEPT 
iptables -A INPUT -p TCP --dport 22 -s $compañero_ip_ens34 -m conntrack --ctstate NEW -j ACCEPT 
iptables -A INPUT -p TCP --dport 22 -s 10.30.8.0/255.255.248.0 -m conntrack --ctstate NEW -j ACCEPT 
iptables -A INPUT -p TCP --dport 22 -s 10.20.32.0/255.255.248.0 -m conntrack --ctstate NEW -j ACCEPT 
iptables -A OUTPUT -p TCP --dport 22 -m conntrack --ctstate NEW -j ACCEPT

#NTP

iptables -A INPUT -p UDP --dport 123 -s $compañero_ip_ens33 -m conntrack --ctstate NEW -j ACCEPT
iptables -A OUTPUT -p UDP --sport 123 -d $compañero_ip_ens33 -m conntrack --ctstate NEW -j ACCEPT


#SYSLOG

iptables -A INPUT -p TCP --dport 514 -s $compañero_ip_ens33 -m conntrack --ctstate NEW -j ACCEPT # Solo necesaria en el server
iptables -A OUTPUT -p TCP --dport 514 -d $compañero_ip_ens33 -m conntrack --ctstate NEW -j ACCEPT # Solo en el cliente

#DNS

iptables -A OUTPUT -p UDP --dport 53 -d 10.8.12.49 -m conntrack --ctstate NEW -j ACCEPT
iptables -A OUTPUT -p UDP --dport 53 -d 10.8.12.47 -m conntrack --ctstate NEW -j ACCEPT
iptables -A OUTPUT -p UDP --dport 53 -d 10.8.12.47 -m conntrack --ctstate NEW -j ACCEPT
iptables -A OUTPUT -p UDP --dport 53 -d 10.8.12.50 -m conntrack --ctstate NEW -j ACCEPT

#OpenVPN

iptables -A INPUT -p TCP  --dport 4567 -s $compañero_ip_ens33 -m conntrack --ctstate NEW -j ACCEPT
iptables -A INPUT -p TCP  --dport 4567 -s $compañero_ip_ens34 -m conntrack --ctstate NEW -j ACCEPT
iptables -A OUTPUT -p TCP --sport 4567 -d $compañero_ip_ens33 -m conntrack --ctstate NEW -j ACCEPT
iptables -A OUTPUT -p TCP --sport 4567 -d $compañero_ip_ens34 -m conntrack --ctstate NEW -j ACCEPT

iptables -A INPUT -i ens33 -s $compañero_ip_ens33 -p udp -m conntrack --ctstate NEW --dport 4567 -j ACCEPT             #El tunel se levanta desde ens33
iptables -A OUTPUT -o ens33 -d $compañero_ip_ens33 -p udp -m conntrack --ctstate NEW --dport 4567 -j ACCEPT

#ICMP v6 paquetes

ip6tables -A INPUT -p ipv6-icmp -s $compañero_ipv6 -m conntrack --ctstate NEW -j ACCEPT
ip6tables -A OUTPUT -p ipv6-icmp -m conntrack --ctstate NEW -j ACCEPT

#HTTPs

iptables -A INPUT -p TCP -s $compañero_ip_ens33 -m multiport --dport 80,443 -m conntrack --ctstate NEW -j ACCEPT
iptables -A OUTPUT -p TCP -m multiport --dport 80,443 -m conntrack --ctstate NEW -j ACCEPT

#El firewall se ejecuta durante 2 min, despues de descartan todas las reglas
sleep 2m
echo "acabouse"

iptables -F
iptables -X
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT

ip6tables -F
ip6tables -X
ip6tables -P INPUT ACCEPT
ip6tables -P FORWARD ACCEPT
ip6tables -P OUTPUT ACCEPT


		-le damos permisos de ejecución y lo ejecutamos.
		
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. Instale el SIEM splunk en su máquina. Sobre dicha plataforma haga los siguientes puntos.:

        -> INSTALACIÓN
        
        -scp splunk-9.0.2-17e00c557dc1-linux-2.6-amd64.deb lsi@10.11.49.98:/home/lsi (desde maq local)
	-dpkg -i splunk-9.0.2-17e00c557dc1-linux-2.6-amd64.deb
	-/opt/splunk/bin/splunk enable boot-start
	    -usr: lsi
	    -pass: cristiano
	-systemctl start splunk.service
	-/opt/splunk/etc/system/default# nano server.conf
		-cambiar MinFreeDiskSpace = 5000 a 500.
	-systemctl restart splunk
	-con vpn encendida hacer http://10.11.49.98:8000   
        
        añades los ficheros. -> explorar.  
        a. Genere una query que visualice los logs internos del splunk
		Search: index="_internal"

	b. Cargué el fichero /var/log/apache2/access.log y el journald del sistema y visualícelos.
		Entrar en http://tu_ip:8000/
		Iniciar sesion
		Click en Add Data
		Click Monitor
		Files & Directories
		Browse
		Seleccionas /var/log/apache2/access.log o /run/log/journal/db1c24869f59488fb51181a0eb0bcae8
		Si a todo y ya esta
	c. Obtenga las IPs de los equipos que se han conectado a su servidor web (pruebe a generar algún tipo de gráfico de visualización), 
		así como las IPs que se han conectado un determinado día de un determinado mes.
		Entrar a http://tu_ip:8000/en-US/app/search

		Ips conectadas: source="/var/log/apache2/access.log" | dedup clientip | table clientip. 
		Para tener una ip del extranjero, coges una ip de internet, abres /var/log/apache2/access.log y cambias una ip en una peticion GET por la ip que buscaste.

			Para el gráfico click en la pestaña de Visualización

	d. Trate de obtener el país y región origen de las IPs que se han conectado a su servidor web y si posible sus coordenadas geográficas.
		Ips conectadas + geolocalización: source="/var/log/apache2/access.log" | dedup clientip | table clientip | iplocation clientip

	e. Obtenga los hosts origen, sources y sourcestypes.
		En Search: source="/var/log/apache2/access.log", son los 3 valores de la parte Selected. 
		40 maneras de ver los putos datos, no se cual le hace más ilusión a Adri:

		source="/var/log/apache2/access.log" | dedup host | table host
		source="/var/log/apache2/access.log" | dedup source | table source
		source="/var/log/apache2/access.log" | dedup sourcetype | table sourcetype
		source="/var/log/apache2/access.log" | table host, source, sourcetype
		| dedup host | table source

f. ¿cómo podría hacer que splunk haga de servidor de log de su cliente?
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. Ejecute la utilidad de auditoría de seguridad lynis en su sistema y trate de identificar las
	acciones de securización detectadas así como los consejos sobre las que se deberían contemplar.
	
	
	lynis audit system -> te dice que eres basura, absoluta basura.
	 
	 (se hizo antes del firewall)
	 
	-[ Lynis 3.0.2 Results ]-

  Warnings (2):
  ----------------------------
  ! Nameserver 10.8.12.47 does not respond [NETW-2704] 
      https://cisofy.com/lynis/controls/NETW-2704/

  ! iptables module(s) loaded, but no rules active [FIRE-4512] 
      https://cisofy.com/lynis/controls/FIRE-4512/

	-mirar reports sobre ssh y ver como poder solucionar:
		nano /etc/ssh/sshd_config
		
				Estas son las consideraciones:

		 * Consider hardening SSH configuration [SSH-7408] 
		    - Details  : AllowTcpForwarding (set YES to NO)
		      https://cisofy.com/lynis/controls/SSH-7408/

		  * Consider hardening SSH configuration [SSH-7408] 
		    - Details  : ClientAliveCountMax (set 3 to 2)
		      https://cisofy.com/lynis/controls/SSH-7408/

		  * Consider hardening SSH configuration [SSH-7408] 
		    - Details  : Compression (set YES to NO)
		      https://cisofy.com/lynis/controls/SSH-7408/

		  * Consider hardening SSH configuration [SSH-7408] 
		    - Details  : LogLevel (set INFO to VERBOSE)
		      https://cisofy.com/lynis/controls/SSH-7408/

		  * Consider hardening SSH configuration [SSH-7408] 
		    - Details  : MaxAuthTries (set 6 to 3)
		      https://cisofy.com/lynis/controls/SSH-7408/

		  * Consider hardening SSH configuration [SSH-7408] 
		    - Details  : MaxSessions (set 10 to 2)
		      https://cisofy.com/lynis/controls/SSH-7408/

		  * Consider hardening SSH configuration [SSH-7408] 
		    - Details  : Port (set 22 to )
		      https://cisofy.com/lynis/controls/SSH-7408/

		  * Consider hardening SSH configuration [SSH-7408] 
		    - Details  : TCPKeepAlive (set YES to NO)
		      https://cisofy.com/lynis/controls/SSH-7408/

		  * Consider hardening SSH configuration [SSH-7408] 
		    - Details  : X11Forwarding (set YES to NO)
		      https://cisofy.com/lynis/controls/SSH-7408/

		  * Consider hardening SSH configuration [SSH-7408] 
		    - Details  : AllowAgentForwarding (set YES to NO)
		      https://cisofy.com/lynis/controls/SSH-7408/
		Como solucionar los warnings (solo saberlo, no hacerlo) :
		Casi todo se hace sobre el nano /etc/ssh/sshd_config

		OpenSSH option: AllowTcpForwarding :
		Poner a No, simplemente desabilitas el reenvío TCP

		OpenSSH option: ClientAliveCountMax:
		Estableces un tiempo de conectividad máximo, simplemente descomentas la linea y pones 2 en vez de 3

		OpenSSH option: Compression:
		Habilitas o desabilitar el comprimir toda la comunicacion de ssh, pon a NO

		OpenSSH option: LogLevel:
		Estableces un nuevo tipo de log, poner VERBOSE en vez de INFO

		OpenSSH option: MaxAuthTries:
		Si pones mal la contraseña X veces te chimpa fuera, poner 3 en vez de 6

		OpenSSH option: MaxSessions :
		Limitas el numero máximo de sesiones simultaneas, poner 2 en vez de 10

		OpenSSH option: Port:
		Cambiar el puerto por defecto del ssh, del 22 al q te la sople mas

		OpenSSH option: TCPKeepAlive:
		Mantiene el keepAlive, poner NO

		OpenSSH option: X11Forwarding:
		Igual que el anterior, poner en NO

		OpenSSH option: AllowAgentForwarding:
		Para variar, igual que el anterior, poner NO
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9. EN LA PRÁCTICA 2 se obtuvo un perfil de los principales sistemas que conviven en su
	red, puertos accesibles, fingerprinting, paquetería de red, etc. Seleccione un subconjunto
	de máquinas del laboratorio de prácticas y la propia red. Elabore el correspondiente
	informe de análisis de vulnerabilidades. Puede utilizar como apoyo al análisis la
	herramienta Nessus Essentials (disponible para educación en
	https://www.tenable.com/tenable-for-education/nessus-essentials bajo registro para
	obtener un código de activación) para su instalación en la máquina debian de prácticas.
	Muestra las etapas o fases del desarrollo de un “report”, describe el
	formato del “report” y finaliza con un ejemplo. http://www.sans.org/reading-
	room/whitepapers/bestprac/writing-penetration-testing-report-33343?show=writing-
	penetration-testing-report-33343&cat=bestprac
	
	-INSTALACIÓN NESSUS:
		->curl --request GET \
 			 --url 'https://www.tenable.com/downloads/api/v2/pages/nessus/files/Nessus-10.4.1-debian9_amd64.deb' \
 			 --output 'Nessus-10.4.1-debian9_amd64.deb'
 		->dpkg -i Nessus-10.4.1-debian9_amd64.deb
		->systemctl start nessusd.service
		(acceder a la ip por el buscador)
		-no me acuerdo de lacontraseña
	-esto molaria hacerlo en mi PC.

-> destacar que nessus está desinstalado ya que ocupaba mucho espacio.

b. Plantilla de vulnerabilityassessment.co.uk.
h	ttp://www.vulnerabilityassessment.co.uk/report%20template.html




OPENVAS SPLUNK SSH FIREWALL EN LAS DOS MAQUINAS.

